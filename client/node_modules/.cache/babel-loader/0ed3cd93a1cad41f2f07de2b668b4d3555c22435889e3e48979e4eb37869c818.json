{"ast":null,"code":"import { createContext, version as ReactVersion } from 'react';\nconst ContextKey = Symbol.for(`react-redux-context-${ReactVersion}`);\nconst gT = globalThis;\nfunction getContext() {\n  let realContext = gT[ContextKey];\n  if (!realContext) {\n    realContext = createContext(null);\n    if (process.env.NODE_ENV !== 'production') {\n      realContext.displayName = 'ReactRedux';\n    }\n    gT[ContextKey] = realContext;\n  }\n  return realContext;\n}\nexport const ReactReduxContext = /*#__PURE__*/new Proxy({}, /*#__PURE__*/new Proxy({}, {\n  get(_, handler) {\n    const target = getContext(); // @ts-ignore\n\n    return function (_target) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return Reflect[handler](target, ...args);\n    };\n  }\n}));\nexport default ReactReduxContext;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}